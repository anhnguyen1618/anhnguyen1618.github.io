{"componentChunkName":"component---src-templates-blog-post-js","path":"/new-beginnings/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"2a24ff44-8d1a-5749-a0d5-713f5efa2bf6","excerpt":"Flight map visualization Technologies: Mapbox GL JS - Library to render map on browser using Web GL Turf.js - Library to calculate great-circles distance Arc.js…","html":"<h1>Flight map visualization</h1>\n<h2>Technologies:</h2>\n<ol>\n<li><a href=\"https://docs.mapbox.com/mapbox-gl-js/api/\">Mapbox GL JS</a> - Library to render map on browser using Web GL</li>\n<li><a href=\"https://turfjs.org/\">Turf.js</a> - Library to calculate great-circles distance</li>\n<li><a href=\"https://github.com/springmeyer/arc.js/\">Arc.js</a> - Library to calculate arc points using great-circles distance</li>\n<li><a href=\"https://jquery.com/\">Jquery</a> - JavaScript library to handle HTML interaction</li>\n<li><a href=\"https://jestjs.io/\">Jest</a> - Unit test library</li>\n<li><a href=\"https://palletsprojects.com/p/flask/\">Flask</a> - Python server framework</li>\n<li>Heroku - Free cloud hosting</li>\n<li><a href=\"https://www.docker.com/\">Docker</a> - Linux container for development</li>\n</ol>\n<h2>Demo:</h2>\n<p>Heroku demo: <a href=\"https://flight-map-visualizer.herokuapp.com/\">Click here</a></p>\n<h2>Functionality:</h2>\n<ol>\n<li>The map is rendered using <code class=\"language-text\">Mapbox GL JS</code>.</li>\n<li>The map displays arc lines connecting every capital to Helsinki using <code class=\"language-text\">greate-circle distance</code>.</li>\n<li>The map with style highlights for better data visualization. Read <code class=\"language-text\">Instructions.pdf</code> for more details.</li>\n<li>The lines are colored based on distances.</li>\n<li>The popup with route’s distance is shown when the line is <strong>hovered</strong> on.</li>\n<li>The feature “All flights lead to any city” is implemented by <code class=\"language-text\">clicking</code> into the <code class=\"language-text\">air plane</code> markers(representing capitals). All lines that connect to that <strong>clicked</strong> city.</li>\n</ol>\n<h2>General design:</h2>\n<ol>\n<li>\n<p>The capital data is stored in the file <code class=\"language-text\">capitals.json</code> from <a href=\"http://techslides.com/list-of-countries-and-capitals\">this source</a>. It is served to the front-end by a simple Flask server in <code class=\"language-text\">index.py</code>.</p>\n</li>\n<li>\n<p>The front-end code is stored in <code class=\"language-text\">./src</code> directory. Front-end code has 5 main parts:</p>\n<ul>\n<li><strong>Fetching and transform data to correct format</strong> is done in <code class=\"language-text\">src/scripts/data-processor.js</code></li>\n<li><strong>Controlling mapbox GL</strong> is done in <code class=\"language-text\">src/scripts/map-wrapper.js</code></li>\n<li><strong>Handling stylings, theme</strong> is done in <code class=\"language-text\">src/scripts/stylings.js</code></li>\n<li><strong>Handling HTML DOM element</strong> is done in <code class=\"language-text\">src/scripts/dom-handler</code></li>\n<li><strong>Gluing everything together</strong> is in <code class=\"language-text\">src/scripts/index.js</code></li>\n</ul>\n</li>\n<li>\n<p>Docker and docker-compose is used for development. Running <code class=\"language-text\">webpack-dev-server</code> in one container and <code class=\"language-text\">flask</code> server in another.</p>\n</li>\n</ol>\n<h2>Project structure:</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mapbox/\n└─── docker-files/          <span class=\"token comment\"># Docker files for front-end and back-end</span>\n└─── static/                <span class=\"token comment\"># Folder to store the built css, js to be served by Flask</span>\n└─── templates/             <span class=\"token comment\"># Html served by Flask</span>\n└─── index.py               <span class=\"token comment\"># Python server</span>\n└─── capitals.json          <span class=\"token comment\"># JSON capital data</span>\n└─── .babelrc               <span class=\"token comment\"># Config for JavaScript ES6 transpiler</span>\n└─── .eslintrc              <span class=\"token comment\"># Config for JavaScript linter</span>\n└─── webpack.config.js      <span class=\"token comment\"># Config for hot reload development server, package builder</span>\n└─── package.json           <span class=\"token comment\"># Package manager config for Javascript project</span>\n└─── requirements.txt       <span class=\"token comment\"># Package list for Python</span>\n└─── ProcFile               <span class=\"token comment\"># Heroku scripts</span>\n└─── run                    <span class=\"token comment\"># Script to execute unit test, lint inside Docker container</span>\n└─── Instructions.pdf       <span class=\"token comment\"># INTRUCTION ON HOW TO USE THE PRODUCT</span>\n│\n└─── src/scripts/           <span class=\"token comment\"># Main scripts</span>\n    │\n    └─── index.js           <span class=\"token comment\"># Entry point of the app</span>\n    └─── data-processor.js  <span class=\"token comment\"># Fetch data and transform data to GEOJSON format</span>\n    └─── map-wrapper.js     <span class=\"token comment\"># Encapsulate mapbox-gl-js instance and controll the map</span>\n    │\n    └─── stylings.js        <span class=\"token comment\"># Handle styling, theme changes</span>\n    └─── dom-handler.js     <span class=\"token comment\"># Handle HTML DOM events</span>\n    └─── constants.js       <span class=\"token comment\"># Constants such as API key...</span>\n    └─── utils.js           <span class=\"token comment\"># Helper functions</span>\n    └─── __tests__/         <span class=\"token comment\"># Unit tests</span></code></pre></div>\n<h2>Installations:</h2>\n<p>Choose either of the listed methods below(Preferably the first method)</p>\n<ul>\n<li>\n<p><strong>USING docker and docker-compose</strong>: Running development servers (with hot reload)</p>\n<ol>\n<li>Installing docker (<a href=\"https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=94798094\">Linux</a>, <a href=\"https://runnable.com/docker/install-docker-on-macos\">MacOs</a>,<a href=\"https://www.sitepoint.com/docker-windows-10-home/\">Window</a>)</li>\n<li>Start front-end and back-end development server by the command:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    <span class=\"token function\">docker-compose</span> up</code></pre></div>\n<ol start=\"3\">\n<li>Open browser with the address <code class=\"language-text\">http://127.0.0.1:8080/</code> to see the result. Make sure that port <code class=\"language-text\">8080</code> is available</li>\n<li>Add execution permission for the script <code class=\"language-text\">run</code>:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    <span class=\"token function\">chmod</span> +x run</code></pre></div>\n<ol start=\"5\">\n<li>To run unit test, use the command:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    ./run <span class=\"token builtin class-name\">test</span></code></pre></div>\n<ol start=\"6\">\n<li>To run unit test, user the command:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    ./run lint</code></pre></div>\n<ol start=\"7\">\n<li>To build package for production deployment, in which the built files <code class=\"language-text\">main.js</code>, <code class=\"language-text\">runtime.js</code>, <code class=\"language-text\">vendor.js</code> are built into <code class=\"language-text\">/static</code> directory.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    ./run build</code></pre></div>\n</li>\n<li>\n<p><strong>Installing in your own machine</strong></p>\n<ol>\n<li>Install <code class=\"language-text\">node</code> and <code class=\"language-text\">npm</code>. Check <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-18-04\">here</a>.</li>\n<li>Install <code class=\"language-text\">python</code> and <code class=\"language-text\">pip</code>. Check <a href=\"https://linuxize.com/post/how-to-install-pip-on-ubuntu-18.04/\">here</a></li>\n<li>Install front-end dependencies:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    <span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre></div>\n<ol start=\"4\">\n<li>Install back-end dependencies:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    pip <span class=\"token function\">install</span> -r ./requirements.txt</code></pre></div>\n<ol start=\"5\">\n<li>Run back-end development server:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    python index.py</code></pre></div>\n<ol start=\"6\">\n<li>Run front-end development server on another terminal tab:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    <span class=\"token function\">npm</span> run dev</code></pre></div>\n<ol start=\"7\">\n<li>Open browser with the address <code class=\"language-text\">http://127.0.0.1:8080/</code> to see the result. Make sure that port <code class=\"language-text\">8080</code> is available</li>\n<li>Run unit tests:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    <span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span></code></pre></div>\n<ol start=\"9\">\n<li>Run lint:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    <span class=\"token function\">npm</span> run lint</code></pre></div>\n<ol start=\"10\">\n<li>Build production:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    <span class=\"token function\">npm</span> run build</code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"New Beginnings","date":"May 28, 2015","description":"This is a custom description for SEO and Open Graph purposes, rather than the default generated excerpt. Simply add a description field to the frontmatter."}},"previous":{"fields":{"slug":"/my-second-post/"},"frontmatter":{"title":"My Second Post!"}},"next":null},"pageContext":{"id":"2a24ff44-8d1a-5749-a0d5-713f5efa2bf6","previousPostId":"b360c5c9-b0f5-5a78-bf7a-c631d1104735","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}